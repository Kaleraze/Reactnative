import React, { useState } from "react";
import {
  View,
  StyleSheet,
  Image,
  Alert,
  TouchableOpacity,
} from "react-native";
import { Button, Card, Text, ActivityIndicator } from "react-native-paper";
import * as ImagePicker from "expo-image-picker";
import { supabase } from "../config/supabase";

const ImageUpload = ({
  imageUrl,
  onImageChange,
  disabled = false
}) => {
  const [uploading, setUploading] = useState(false);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const uploadImage = async (imageUri) => {
    try {
      setUploading(true);
      console.log("‚úçÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:", imageUri);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique filename
      const timestamp = Date.now();
      const filename = `product_${timestamp}.jpg`;
      console.log("‚ÑπÔ∏è Filename:", filename);

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ö‡∏ô‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Supabase Storage
      // ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ fetch API
      const response = await fetch(imageUri);
      const arrayBuffer = await response.arrayBuffer();

      console.log("üìÑ File info:", {
        size: arrayBuffer.byteLength,
        type: 'image/jpeg'
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
      if (arrayBuffer.byteLength === 0) {
        throw new Error("‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå");
      }

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase client
      const { data, error } = await supabase.storage
        .from("product-images")
        .upload(filename, arrayBuffer, {
          contentType: 'image/jpeg',
          upsert: true
        });

      if (error) {
        console.error("‚ùå Upload Error:", error);
        throw error;
      }
      console.log("‚úîÔ∏è Upload Success:", data);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô bucket
      const { data: fileList, error: listError } = await supabase.storage
        .from("product-images")
        .list();
      if (listError) {
        console.error("‚ùå List Error:", listError);
      } else {
        console.log("üìÇ Files in bucket:", fileList);
        const uploadedFile = fileList.find(file => file.name === filename);
        console.log("‚úÖ Uploaded file found:", uploadedFile);
      }

      // ‡∏£‡∏±‡∏ö public URL ‡∏à‡∏≤‡∏Å path ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å upload result
      const filePath = data.path || filename;
      console.log("‚ÑπÔ∏è File path from upload:", filePath);

      const { data: { publicUrl } } = supabase.storage
        .from("product-images")
        .getPublicUrl(filePath);
      console.log("üîó Public URL:", publicUrl);

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debugging
      console.log("‚ÑπÔ∏è Filename used:", filename);
      console.log("‚ú® Bucket name:", "product-images");
      console.log("üìÇ File path:", filePath);
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤
      try {
        const testResponse = await fetch(publicUrl, { method: 'HEAD' });
        console.log("‚úÖ URL Test Response:", {
          status: testResponse.status,
          statusText: testResponse.statusText,
          headers: Object.fromEntries(testResponse.headers.entries())
        });
      } catch (testError) {
        console.error("‚ùå URL Test Error:", testError);
      }

      onImageChange(publicUrl);

    } catch (error) {
      console.error("‚ùå Error uploading image:", error);
      Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: " + error.message);
    } finally {
      setUploading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Gallery
  const pickImageFromGallery = () => {
    Alert.alert(
      "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
      "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏Ñ‡∏•‡∏±‡∏á‡∏†‡∏≤‡∏û",
          onPress: async () => {
            try {
              // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏†‡∏≤‡∏û
              const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
              if (status !== 'granted') {
                Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏†‡∏≤‡∏û");
                return;
              }

              const result = await ImagePicker.launchImageLibraryAsync({
                mediaTypes: ImagePicker.MediaType.Images,
                allowsEditing: true,
                aspect: [4, 3],
                quality: 0.8,
              });

              if (!result.canceled && result.assets[0]) {
                uploadImage(result.assets[0].uri);
              }
            } catch (error) {
              console.error("Error picking image:", error);
              Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ");
            }
          }
        },
        {
          text: "‡∏Å‡∏•‡πâ‡∏≠‡∏á",
          onPress: async () => {
            try {
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á
              const cameraAvailable = await ImagePicker.getCameraPermissionsAsync();
              if (!cameraAvailable.granted) {
                const { status } = await ImagePicker.requestCameraPermissionsAsync();
                if (status !== 'granted') {
                  Alert.alert(
                    "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á", 
                    "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ",
                    [
                      { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
                      { text: "‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", onPress: () => ImagePicker.requestCameraPermissionsAsync() }
                    ]
                  );
                  return;
                }
              }

              const result = await ImagePicker.launchCameraAsync({
                allowsEditing: true,
                aspect: [4, 3],
                quality: 0.8,
                exif: false,
              });

              if (!result.canceled && result.assets && result.assets[0]) {
                uploadImage(result.assets[0].uri);
              }
            } catch (error) {
              console.error("Error taking photo:", error);
              let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ";
              if (error.message.includes("Camera not available")) {
                errorMessage = "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà";
              } else if (error.message.includes("Permission")) {
                errorMessage = "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á";
              }
              Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", errorMessage);
            }
          }
        }
      ]
    );
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const removeImage = () => {
    Alert.alert(
      "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
      "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏•‡∏ö",
          style: "destructive",
          onPress: () => onImageChange("")
        }
      ]
    );
  };

  return (
    <View style={styles.container}>
      {imageUrl ? (
        <Card style={styles.imageCard}>
          <View style={styles.imageContainer}>
            <Image
              source={{ uri: imageUrl }}
              style={styles.image}
              resizeMode="cover"
            />
            <TouchableOpacity
              onPress={removeImage}
              style={styles.removeButton}
              disabled={disabled}
            >
              <Text style={styles.removeButtonText}>√ó</Text>
            </TouchableOpacity>
          </View>
          <Text style={styles.imageText}>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</Text>
        </Card>
      ) : (
        <TouchableOpacity
          onPress={pickImageFromGallery}
          disabled={disabled || uploading}
        >
          <Card style={styles.uploadCard}>
            <View style={styles.uploadContent}>
              <ActivityIndicator
                animating={uploading}
                size="large"
                style={uploading && { marginBottom: 12 }}
              />
              <Text style={styles.uploadText}>
                {uploading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î..." : "‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"}
              </Text>
              {uploading ? (
                <Button
                  mode="outlined"
                  disabled={true}
                  style={styles.uploadButton}
                >
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                </Button>
              ) : (
                <Button
                  icon="image-plus"
                  mode="outlined"
                  onPress={pickImageFromGallery}
                  style={styles.uploadButton}
                >
                  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                </Button>
              )}
            </View>
          </Card>
        </TouchableOpacity>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginBottom: 16,
  },
  imageCard: {
    marginBottom: 8,
  },
  imageContainer: {
    position: "relative",
    alignItems: "center",
  },
  image: {
    width: "100%",
    height: 200,
    borderRadius: 8,
    resizeMode: "cover",
  },
  removeButton: {
    position: "absolute",
    top: 8,
    right: 8,
    backgroundColor: "rgba(0,0,0,0.6)",
    borderRadius: 15,
    width: 30,
    height: 30,
    justifyContent: "center",
    alignItems: "center",
  },
  removeButtonText: {
    color: "white",
    fontSize: 18,
    fontWeight: "bold",
  },
  imageText: {
    textAlign: "center",
    marginTop: 8,
    color: "#666",
  },
  uploadCard: {
    borderStyle: "dashed",
    borderWidth: 2,
    borderColor: "#ccc",
  },
  uploadContent: {
    alignItems: "center",
    paddingVertical: 20,
  },
  uploadText: {
    marginBottom: 12,
    color: "#666",
    textAlign: "center",
  },
  uploadButton: {
    borderColor: "#FF6B35",
  },
});

export default ImageUpload;